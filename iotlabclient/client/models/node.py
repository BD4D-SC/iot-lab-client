# coding: utf-8

"""
    IoT-LAB REST API

    REST API documentation of [IoT-LAB](http://www.iot-lab.info) testbed.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Node(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'archi': 'str',
        'mobile': 'int',
        'camera': 'int',
        'mobility_type': 'str',
        'network_address': 'str',
        'site': 'str',
        'state': 'str',
        'uid': 'str',
        'x': 'str',
        'y': 'str',
        'z': 'str'
    }

    attribute_map = {
        'archi': 'archi',
        'mobile': 'mobile',
        'camera': 'camera',
        'mobility_type': 'mobility_type',
        'network_address': 'network_address',
        'site': 'site',
        'state': 'state',
        'uid': 'uid',
        'x': 'x',
        'y': 'y',
        'z': 'z'
    }

    def __init__(self, archi=None, mobile=None, camera=None, mobility_type=None, network_address=None, site=None, state=None, uid=None, x=None, y=None, z=None):  # noqa: E501
        """Node - a model defined in OpenAPI"""  # noqa: E501

        self._archi = None
        self._mobile = None
        self._camera = None
        self._mobility_type = None
        self._network_address = None
        self._site = None
        self._state = None
        self._uid = None
        self._x = None
        self._y = None
        self._z = None
        self.discriminator = None

        if archi is not None:
            self.archi = archi
        if mobile is not None:
            self.mobile = mobile
        if camera is not None:
            self.camera = camera
        if mobility_type is not None:
            self.mobility_type = mobility_type
        if network_address is not None:
            self.network_address = network_address
        if site is not None:
            self.site = site
        if state is not None:
            self.state = state
        if uid is not None:
            self.uid = uid
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if z is not None:
            self.z = z

    @property
    def archi(self):
        """Gets the archi of this Node.  # noqa: E501


        :return: The archi of this Node.  # noqa: E501
        :rtype: str
        """
        return self._archi

    @archi.setter
    def archi(self, archi):
        """Sets the archi of this Node.


        :param archi: The archi of this Node.  # noqa: E501
        :type: str
        """

        self._archi = archi

    @property
    def mobile(self):
        """Gets the mobile of this Node.  # noqa: E501


        :return: The mobile of this Node.  # noqa: E501
        :rtype: int
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Node.


        :param mobile: The mobile of this Node.  # noqa: E501
        :type: int
        """

        self._mobile = mobile

    @property
    def camera(self):
        """Gets the camera of this Node.  # noqa: E501


        :return: The camera of this Node.  # noqa: E501
        :rtype: int
        """
        return self._camera

    @camera.setter
    def camera(self, camera):
        """Sets the camera of this Node.


        :param camera: The camera of this Node.  # noqa: E501
        :type: int
        """

        self._camera = camera

    @property
    def mobility_type(self):
        """Gets the mobility_type of this Node.  # noqa: E501


        :return: The mobility_type of this Node.  # noqa: E501
        :rtype: str
        """
        return self._mobility_type

    @mobility_type.setter
    def mobility_type(self, mobility_type):
        """Sets the mobility_type of this Node.


        :param mobility_type: The mobility_type of this Node.  # noqa: E501
        :type: str
        """

        self._mobility_type = mobility_type

    @property
    def network_address(self):
        """Gets the network_address of this Node.  # noqa: E501


        :return: The network_address of this Node.  # noqa: E501
        :rtype: str
        """
        return self._network_address

    @network_address.setter
    def network_address(self, network_address):
        """Sets the network_address of this Node.


        :param network_address: The network_address of this Node.  # noqa: E501
        :type: str
        """

        self._network_address = network_address

    @property
    def site(self):
        """Gets the site of this Node.  # noqa: E501


        :return: The site of this Node.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Node.


        :param site: The site of this Node.  # noqa: E501
        :type: str
        """
        if site is not None and not re.search(r'^[a-z0-9]*$', site):  # noqa: E501
            raise ValueError(r"Invalid value for `site`, must be a follow pattern or equal to `/^[a-z0-9]*$/`")  # noqa: E501

        self._site = site

    @property
    def state(self):
        """Gets the state of this Node.  # noqa: E501


        :return: The state of this Node.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Node.


        :param state: The state of this Node.  # noqa: E501
        :type: str
        """
        allowed_values = ["Alive", "Busy", "Suspected", "Dead", "Absent"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this Node.  # noqa: E501


        :return: The uid of this Node.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Node.


        :param uid: The uid of this Node.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def x(self):
        """Gets the x of this Node.  # noqa: E501


        :return: The x of this Node.  # noqa: E501
        :rtype: str
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Node.


        :param x: The x of this Node.  # noqa: E501
        :type: str
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this Node.  # noqa: E501


        :return: The y of this Node.  # noqa: E501
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Node.


        :param y: The y of this Node.  # noqa: E501
        :type: str
        """

        self._y = y

    @property
    def z(self):
        """Gets the z of this Node.  # noqa: E501


        :return: The z of this Node.  # noqa: E501
        :rtype: str
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this Node.


        :param z: The z of this Node.  # noqa: E501
        :type: str
        """

        self._z = z

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
