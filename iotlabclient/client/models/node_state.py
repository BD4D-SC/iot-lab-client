# coding: utf-8

"""
    IoT-LAB REST API

    REST API documentation of [IoT-LAB](http://www.iot-lab.info) testbed.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NodeState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'network_address': 'str',
        'start_date': 'str',
        'stop_date': 'str',
        'state': 'str'
    }

    attribute_map = {
        'network_address': 'network_address',
        'start_date': 'start_date',
        'stop_date': 'stop_date',
        'state': 'state'
    }

    def __init__(self, network_address=None, start_date=None, stop_date=None, state=None):  # noqa: E501
        """NodeState - a model defined in OpenAPI"""  # noqa: E501

        self._network_address = None
        self._start_date = None
        self._stop_date = None
        self._state = None
        self.discriminator = None

        if network_address is not None:
            self.network_address = network_address
        if start_date is not None:
            self.start_date = start_date
        if stop_date is not None:
            self.stop_date = stop_date
        if state is not None:
            self.state = state

    @property
    def network_address(self):
        """Gets the network_address of this NodeState.  # noqa: E501


        :return: The network_address of this NodeState.  # noqa: E501
        :rtype: str
        """
        return self._network_address

    @network_address.setter
    def network_address(self, network_address):
        """Sets the network_address of this NodeState.


        :param network_address: The network_address of this NodeState.  # noqa: E501
        :type: str
        """

        self._network_address = network_address

    @property
    def start_date(self):
        """Gets the start_date of this NodeState.  # noqa: E501


        :return: The start_date of this NodeState.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this NodeState.


        :param start_date: The start_date of this NodeState.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def stop_date(self):
        """Gets the stop_date of this NodeState.  # noqa: E501


        :return: The stop_date of this NodeState.  # noqa: E501
        :rtype: str
        """
        return self._stop_date

    @stop_date.setter
    def stop_date(self, stop_date):
        """Sets the stop_date of this NodeState.


        :param stop_date: The stop_date of this NodeState.  # noqa: E501
        :type: str
        """

        self._stop_date = stop_date

    @property
    def state(self):
        """Gets the state of this NodeState.  # noqa: E501


        :return: The state of this NodeState.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NodeState.


        :param state: The state of this NodeState.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
