# coding: utf-8

"""
    IoT-LAB REST API

    REST API documentation of [IoT-LAB](http://www.iot-lab.info) testbed.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Profile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'profilename': 'str',
        'nodearch': 'str',
        'power': 'str',
        'consumption': 'ProfileConsumption',
        'radio': 'ProfileRadio'
    }

    attribute_map = {
        'profilename': 'profilename',
        'nodearch': 'nodearch',
        'power': 'power',
        'consumption': 'consumption',
        'radio': 'radio'
    }

    def __init__(self, profilename=None, nodearch=None, power=None, consumption=None, radio=None):  # noqa: E501
        """Profile - a model defined in OpenAPI"""  # noqa: E501

        self._profilename = None
        self._nodearch = None
        self._power = None
        self._consumption = None
        self._radio = None
        self.discriminator = None

        self.profilename = profilename
        self.nodearch = nodearch
        self.power = power
        if consumption is not None:
            self.consumption = consumption
        if radio is not None:
            self.radio = radio

    @property
    def profilename(self):
        """Gets the profilename of this Profile.  # noqa: E501


        :return: The profilename of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._profilename

    @profilename.setter
    def profilename(self, profilename):
        """Sets the profilename of this Profile.


        :param profilename: The profilename of this Profile.  # noqa: E501
        :type: str
        """
        if profilename is None:
            raise ValueError("Invalid value for `profilename`, must not be `None`")  # noqa: E501

        self._profilename = profilename

    @property
    def nodearch(self):
        """Gets the nodearch of this Profile.  # noqa: E501


        :return: The nodearch of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._nodearch

    @nodearch.setter
    def nodearch(self, nodearch):
        """Sets the nodearch of this Profile.


        :param nodearch: The nodearch of this Profile.  # noqa: E501
        :type: str
        """
        if nodearch is None:
            raise ValueError("Invalid value for `nodearch`, must not be `None`")  # noqa: E501
        allowed_values = ["m3", "a8", "custom"]  # noqa: E501
        if nodearch not in allowed_values:
            raise ValueError(
                "Invalid value for `nodearch` ({0}), must be one of {1}"  # noqa: E501
                .format(nodearch, allowed_values)
            )

        self._nodearch = nodearch

    @property
    def power(self):
        """Gets the power of this Profile.  # noqa: E501


        :return: The power of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this Profile.


        :param power: The power of this Profile.  # noqa: E501
        :type: str
        """
        if power is None:
            raise ValueError("Invalid value for `power`, must not be `None`")  # noqa: E501
        allowed_values = ["dc"]  # noqa: E501
        if power not in allowed_values:
            raise ValueError(
                "Invalid value for `power` ({0}), must be one of {1}"  # noqa: E501
                .format(power, allowed_values)
            )

        self._power = power

    @property
    def consumption(self):
        """Gets the consumption of this Profile.  # noqa: E501


        :return: The consumption of this Profile.  # noqa: E501
        :rtype: ProfileConsumption
        """
        return self._consumption

    @consumption.setter
    def consumption(self, consumption):
        """Sets the consumption of this Profile.


        :param consumption: The consumption of this Profile.  # noqa: E501
        :type: ProfileConsumption
        """

        self._consumption = consumption

    @property
    def radio(self):
        """Gets the radio of this Profile.  # noqa: E501


        :return: The radio of this Profile.  # noqa: E501
        :rtype: ProfileRadio
        """
        return self._radio

    @radio.setter
    def radio(self, radio):
        """Sets the radio of this Profile.


        :param radio: The radio of this Profile.  # noqa: E501
        :type: ProfileRadio
        """

        self._radio = radio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
