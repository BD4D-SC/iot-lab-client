# coding: utf-8

"""
    IoT-LAB REST API

    REST API documentation of [IoT-LAB](http://www.iot-lab.info) testbed.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProfileConsumption(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current': 'bool',
        'power': 'bool',
        'voltage': 'bool',
        'period': 'int',
        'average': 'int'
    }

    attribute_map = {
        'current': 'current',
        'power': 'power',
        'voltage': 'voltage',
        'period': 'period',
        'average': 'average'
    }

    def __init__(self, current=None, power=None, voltage=None, period=None, average=None):  # noqa: E501
        """ProfileConsumption - a model defined in OpenAPI"""  # noqa: E501

        self._current = None
        self._power = None
        self._voltage = None
        self._period = None
        self._average = None
        self.discriminator = None

        if current is not None:
            self.current = current
        if power is not None:
            self.power = power
        if voltage is not None:
            self.voltage = voltage
        if period is not None:
            self.period = period
        if average is not None:
            self.average = average

    @property
    def current(self):
        """Gets the current of this ProfileConsumption.  # noqa: E501


        :return: The current of this ProfileConsumption.  # noqa: E501
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this ProfileConsumption.


        :param current: The current of this ProfileConsumption.  # noqa: E501
        :type: bool
        """

        self._current = current

    @property
    def power(self):
        """Gets the power of this ProfileConsumption.  # noqa: E501


        :return: The power of this ProfileConsumption.  # noqa: E501
        :rtype: bool
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this ProfileConsumption.


        :param power: The power of this ProfileConsumption.  # noqa: E501
        :type: bool
        """

        self._power = power

    @property
    def voltage(self):
        """Gets the voltage of this ProfileConsumption.  # noqa: E501


        :return: The voltage of this ProfileConsumption.  # noqa: E501
        :rtype: bool
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this ProfileConsumption.


        :param voltage: The voltage of this ProfileConsumption.  # noqa: E501
        :type: bool
        """

        self._voltage = voltage

    @property
    def period(self):
        """Gets the period of this ProfileConsumption.  # noqa: E501


        :return: The period of this ProfileConsumption.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this ProfileConsumption.


        :param period: The period of this ProfileConsumption.  # noqa: E501
        :type: int
        """
        allowed_values = [140, 204, 332, 588, 1100, 2116, 4156, 8244]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"  # noqa: E501
                .format(period, allowed_values)
            )

        self._period = period

    @property
    def average(self):
        """Gets the average of this ProfileConsumption.  # noqa: E501


        :return: The average of this ProfileConsumption.  # noqa: E501
        :rtype: int
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this ProfileConsumption.


        :param average: The average of this ProfileConsumption.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 4, 16, 64, 128, 256, 512, 1024]  # noqa: E501
        if average not in allowed_values:
            raise ValueError(
                "Invalid value for `average` ({0}), must be one of {1}"  # noqa: E501
                .format(average, allowed_values)
            )

        self._average = average

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileConsumption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
