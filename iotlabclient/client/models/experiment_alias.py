# coding: utf-8

"""
    IoT-LAB REST API

    REST API documentation of [IoT-LAB](http://www.iot-lab.info) testbed.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ExperimentAlias(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nodes': 'list[Alias]',
        'type': 'str',
        'name': 'str',
        'duration': 'int',
        'reservation': 'int',
        'profiles': 'CommonExperimentRequestProfiles',
        'mobilities': 'CommonExperimentRequestMobilities',
        'profileassociations': 'list[ProfileAliasAssociation]',
        'firmwareassociations': 'list[FirmwareAliasAssociation]',
        'associations': 'MobilityAliasAssociations',
        'siteassociations': 'ScriptAssociations'
    }

    attribute_map = {
        'nodes': 'nodes',
        'type': 'type',
        'name': 'name',
        'duration': 'duration',
        'reservation': 'reservation',
        'profiles': 'profiles',
        'mobilities': 'mobilities',
        'profileassociations': 'profileassociations',
        'firmwareassociations': 'firmwareassociations',
        'associations': 'associations',
        'siteassociations': 'siteassociations'
    }

    composed_hierarchy = {
        'anyOf': [],
        'allOf': ["AliasAssociations", "CommonExperimentRequest", "ExperimentAliasAllOf", "FirmwareAliasAssociations", "ProfileAliasAssociations", "SiteAssociations"],
        'oneOf': [],
    }

    def __init__(self, nodes=None, type='alias', name=None, duration=None, reservation=None, profiles=None, mobilities=None, profileassociations=None, firmwareassociations=None, associations=None, siteassociations=None):  # noqa: E501
        """ExperimentAlias - a model defined in OpenAPI"""  # noqa: E501

        self._nodes = None
        self._type = None
        self._name = None
        self._duration = None
        self._reservation = None
        self._profiles = None
        self._mobilities = None
        self._profileassociations = None
        self._firmwareassociations = None
        self._associations = None
        self._siteassociations = None
        self.discriminator = None

        if nodes is not None:
            self.nodes = nodes
        self.type = type
        if name is not None:
            self.name = name
        if duration is not None:
            self.duration = duration
        if reservation is not None:
            self.reservation = reservation
        if profiles is not None:
            self.profiles = profiles
        if mobilities is not None:
            self.mobilities = mobilities
        if profileassociations is not None:
            self.profileassociations = profileassociations
        if firmwareassociations is not None:
            self.firmwareassociations = firmwareassociations
        if associations is not None:
            self.associations = associations
        if siteassociations is not None:
            self.siteassociations = siteassociations

    @property
    def nodes(self):
        """Gets the nodes of this ExperimentAlias.  # noqa: E501


        :return: The nodes of this ExperimentAlias.  # noqa: E501
        :rtype: list[Alias]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this ExperimentAlias.


        :param nodes: The nodes of this ExperimentAlias.  # noqa: E501
        :type: list[Alias]
        """

        self._nodes = nodes

    @property
    def type(self):
        """Gets the type of this ExperimentAlias.  # noqa: E501


        :return: The type of this ExperimentAlias.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExperimentAlias.


        :param type: The type of this ExperimentAlias.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["physical", "alias"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this ExperimentAlias.  # noqa: E501


        :return: The name of this ExperimentAlias.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExperimentAlias.


        :param name: The name of this ExperimentAlias.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def duration(self):
        """Gets the duration of this ExperimentAlias.  # noqa: E501


        :return: The duration of this ExperimentAlias.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ExperimentAlias.


        :param duration: The duration of this ExperimentAlias.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def reservation(self):
        """Gets the reservation of this ExperimentAlias.  # noqa: E501


        :return: The reservation of this ExperimentAlias.  # noqa: E501
        :rtype: int
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this ExperimentAlias.


        :param reservation: The reservation of this ExperimentAlias.  # noqa: E501
        :type: int
        """

        self._reservation = reservation

    @property
    def profiles(self):
        """Gets the profiles of this ExperimentAlias.  # noqa: E501


        :return: The profiles of this ExperimentAlias.  # noqa: E501
        :rtype: CommonExperimentRequestProfiles
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this ExperimentAlias.


        :param profiles: The profiles of this ExperimentAlias.  # noqa: E501
        :type: CommonExperimentRequestProfiles
        """

        self._profiles = profiles

    @property
    def mobilities(self):
        """Gets the mobilities of this ExperimentAlias.  # noqa: E501


        :return: The mobilities of this ExperimentAlias.  # noqa: E501
        :rtype: CommonExperimentRequestMobilities
        """
        return self._mobilities

    @mobilities.setter
    def mobilities(self, mobilities):
        """Sets the mobilities of this ExperimentAlias.


        :param mobilities: The mobilities of this ExperimentAlias.  # noqa: E501
        :type: CommonExperimentRequestMobilities
        """

        self._mobilities = mobilities

    @property
    def profileassociations(self):
        """Gets the profileassociations of this ExperimentAlias.  # noqa: E501


        :return: The profileassociations of this ExperimentAlias.  # noqa: E501
        :rtype: list[ProfileAliasAssociation]
        """
        return self._profileassociations

    @profileassociations.setter
    def profileassociations(self, profileassociations):
        """Sets the profileassociations of this ExperimentAlias.


        :param profileassociations: The profileassociations of this ExperimentAlias.  # noqa: E501
        :type: list[ProfileAliasAssociation]
        """

        self._profileassociations = profileassociations

    @property
    def firmwareassociations(self):
        """Gets the firmwareassociations of this ExperimentAlias.  # noqa: E501


        :return: The firmwareassociations of this ExperimentAlias.  # noqa: E501
        :rtype: list[FirmwareAliasAssociation]
        """
        return self._firmwareassociations

    @firmwareassociations.setter
    def firmwareassociations(self, firmwareassociations):
        """Sets the firmwareassociations of this ExperimentAlias.


        :param firmwareassociations: The firmwareassociations of this ExperimentAlias.  # noqa: E501
        :type: list[FirmwareAliasAssociation]
        """

        self._firmwareassociations = firmwareassociations

    @property
    def associations(self):
        """Gets the associations of this ExperimentAlias.  # noqa: E501


        :return: The associations of this ExperimentAlias.  # noqa: E501
        :rtype: MobilityAliasAssociations
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this ExperimentAlias.


        :param associations: The associations of this ExperimentAlias.  # noqa: E501
        :type: MobilityAliasAssociations
        """

        self._associations = associations

    @property
    def siteassociations(self):
        """Gets the siteassociations of this ExperimentAlias.  # noqa: E501


        :return: The siteassociations of this ExperimentAlias.  # noqa: E501
        :rtype: ScriptAssociations
        """
        return self._siteassociations

    @siteassociations.setter
    def siteassociations(self, siteassociations):
        """Sets the siteassociations of this ExperimentAlias.


        :param siteassociations: The siteassociations of this ExperimentAlias.  # noqa: E501
        :type: ScriptAssociations
        """

        self._siteassociations = siteassociations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentAlias):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
