# coding: utf-8

"""
    IoT-LAB REST API

    REST API documentation of [IoT-LAB](http://www.iot-lab.info) testbed.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RobotResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bookable': 'bool',
        'position': 'Point',
        'power': 'RobotResponsePower',
        'robot_state': 'str'
    }

    attribute_map = {
        'bookable': 'bookable',
        'position': 'position',
        'power': 'power',
        'robot_state': 'robot_state'
    }

    def __init__(self, bookable=None, position=None, power=None, robot_state=None):  # noqa: E501
        """RobotResponse - a model defined in OpenAPI"""  # noqa: E501

        self._bookable = None
        self._position = None
        self._power = None
        self._robot_state = None
        self.discriminator = None

        if bookable is not None:
            self.bookable = bookable
        if position is not None:
            self.position = position
        if power is not None:
            self.power = power
        if robot_state is not None:
            self.robot_state = robot_state

    @property
    def bookable(self):
        """Gets the bookable of this RobotResponse.  # noqa: E501


        :return: The bookable of this RobotResponse.  # noqa: E501
        :rtype: bool
        """
        return self._bookable

    @bookable.setter
    def bookable(self, bookable):
        """Sets the bookable of this RobotResponse.


        :param bookable: The bookable of this RobotResponse.  # noqa: E501
        :type: bool
        """

        self._bookable = bookable

    @property
    def position(self):
        """Gets the position of this RobotResponse.  # noqa: E501


        :return: The position of this RobotResponse.  # noqa: E501
        :rtype: Point
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this RobotResponse.


        :param position: The position of this RobotResponse.  # noqa: E501
        :type: Point
        """

        self._position = position

    @property
    def power(self):
        """Gets the power of this RobotResponse.  # noqa: E501


        :return: The power of this RobotResponse.  # noqa: E501
        :rtype: RobotResponsePower
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this RobotResponse.


        :param power: The power of this RobotResponse.  # noqa: E501
        :type: RobotResponsePower
        """

        self._power = power

    @property
    def robot_state(self):
        """Gets the robot_state of this RobotResponse.  # noqa: E501


        :return: The robot_state of this RobotResponse.  # noqa: E501
        :rtype: str
        """
        return self._robot_state

    @robot_state.setter
    def robot_state(self, robot_state):
        """Sets the robot_state of this RobotResponse.


        :param robot_state: The robot_state of this RobotResponse.  # noqa: E501
        :type: str
        """

        self._robot_state = robot_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RobotResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
