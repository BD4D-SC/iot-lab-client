# coding: utf-8

"""
    IoT-LAB REST API

    REST API documentation of [IoT-LAB](http://www.iot-lab.info) testbed.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RobotResponsePower(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'battery_level': 'str',
        'kobuki_battery_source': 'str',
        'kobuki_percentage': 'str',
        'laptop_battery_status': 'str',
        'laptop_percentage': 'int',
        'robot_battery_status': 'str'
    }

    attribute_map = {
        'battery_level': 'battery_level',
        'kobuki_battery_source': 'kobuki_battery_source',
        'kobuki_percentage': 'kobuki_percentage',
        'laptop_battery_status': 'laptop_battery_status',
        'laptop_percentage': 'laptop_percentage',
        'robot_battery_status': 'robot_battery_status'
    }

    def __init__(self, battery_level=None, kobuki_battery_source=None, kobuki_percentage=None, laptop_battery_status=None, laptop_percentage=None, robot_battery_status=None):  # noqa: E501
        """RobotResponsePower - a model defined in OpenAPI"""  # noqa: E501

        self._battery_level = None
        self._kobuki_battery_source = None
        self._kobuki_percentage = None
        self._laptop_battery_status = None
        self._laptop_percentage = None
        self._robot_battery_status = None
        self.discriminator = None

        if battery_level is not None:
            self.battery_level = battery_level
        if kobuki_battery_source is not None:
            self.kobuki_battery_source = kobuki_battery_source
        if kobuki_percentage is not None:
            self.kobuki_percentage = kobuki_percentage
        if laptop_battery_status is not None:
            self.laptop_battery_status = laptop_battery_status
        if laptop_percentage is not None:
            self.laptop_percentage = laptop_percentage
        if robot_battery_status is not None:
            self.robot_battery_status = robot_battery_status

    @property
    def battery_level(self):
        """Gets the battery_level of this RobotResponsePower.  # noqa: E501


        :return: The battery_level of this RobotResponsePower.  # noqa: E501
        :rtype: str
        """
        return self._battery_level

    @battery_level.setter
    def battery_level(self, battery_level):
        """Sets the battery_level of this RobotResponsePower.


        :param battery_level: The battery_level of this RobotResponsePower.  # noqa: E501
        :type: str
        """

        self._battery_level = battery_level

    @property
    def kobuki_battery_source(self):
        """Gets the kobuki_battery_source of this RobotResponsePower.  # noqa: E501


        :return: The kobuki_battery_source of this RobotResponsePower.  # noqa: E501
        :rtype: str
        """
        return self._kobuki_battery_source

    @kobuki_battery_source.setter
    def kobuki_battery_source(self, kobuki_battery_source):
        """Sets the kobuki_battery_source of this RobotResponsePower.


        :param kobuki_battery_source: The kobuki_battery_source of this RobotResponsePower.  # noqa: E501
        :type: str
        """

        self._kobuki_battery_source = kobuki_battery_source

    @property
    def kobuki_percentage(self):
        """Gets the kobuki_percentage of this RobotResponsePower.  # noqa: E501


        :return: The kobuki_percentage of this RobotResponsePower.  # noqa: E501
        :rtype: str
        """
        return self._kobuki_percentage

    @kobuki_percentage.setter
    def kobuki_percentage(self, kobuki_percentage):
        """Sets the kobuki_percentage of this RobotResponsePower.


        :param kobuki_percentage: The kobuki_percentage of this RobotResponsePower.  # noqa: E501
        :type: str
        """

        self._kobuki_percentage = kobuki_percentage

    @property
    def laptop_battery_status(self):
        """Gets the laptop_battery_status of this RobotResponsePower.  # noqa: E501


        :return: The laptop_battery_status of this RobotResponsePower.  # noqa: E501
        :rtype: str
        """
        return self._laptop_battery_status

    @laptop_battery_status.setter
    def laptop_battery_status(self, laptop_battery_status):
        """Sets the laptop_battery_status of this RobotResponsePower.


        :param laptop_battery_status: The laptop_battery_status of this RobotResponsePower.  # noqa: E501
        :type: str
        """

        self._laptop_battery_status = laptop_battery_status

    @property
    def laptop_percentage(self):
        """Gets the laptop_percentage of this RobotResponsePower.  # noqa: E501


        :return: The laptop_percentage of this RobotResponsePower.  # noqa: E501
        :rtype: int
        """
        return self._laptop_percentage

    @laptop_percentage.setter
    def laptop_percentage(self, laptop_percentage):
        """Sets the laptop_percentage of this RobotResponsePower.


        :param laptop_percentage: The laptop_percentage of this RobotResponsePower.  # noqa: E501
        :type: int
        """

        self._laptop_percentage = laptop_percentage

    @property
    def robot_battery_status(self):
        """Gets the robot_battery_status of this RobotResponsePower.  # noqa: E501


        :return: The robot_battery_status of this RobotResponsePower.  # noqa: E501
        :rtype: str
        """
        return self._robot_battery_status

    @robot_battery_status.setter
    def robot_battery_status(self, robot_battery_status):
        """Sets the robot_battery_status of this RobotResponsePower.


        :param robot_battery_status: The robot_battery_status of this RobotResponsePower.  # noqa: E501
        :type: str
        """
        allowed_values = ["Healthy", "Low", "Dangerous", "Maximum"]  # noqa: E501
        if robot_battery_status not in allowed_values:
            raise ValueError(
                "Invalid value for `robot_battery_status` ({0}), must be one of {1}"  # noqa: E501
                .format(robot_battery_status, allowed_values)
            )

        self._robot_battery_status = robot_battery_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RobotResponsePower):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
